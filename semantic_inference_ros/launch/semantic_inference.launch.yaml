---
launch:
  # Segmentation configuration
  - arg:
      name: model_name
      # Other model options:
      # - ade20k-hrnetv2-c1
      # - ade20k-mobilnetv2dilated-c1_deepsup
      default: ade20k-efficientvit_seg_l2
      description: >
        Model to use (typically the filename without the .onnx extension).
        Can be specified as an absolute path, but requires settings 'model_config' to the correct filepath.
  - arg: {name: model_config, default: $(find-pkg-share semantic_inference_ros)/config/models/$(var model_name).yaml, description: Model-specific configuration}
  - arg: {name: force_rebuild, default: 'false', description: Force TensorRT to rebuild engine}
  # Run options
  - arg: {name: debug, default: 'false', description: Run with GDB}
  - arg: {name: verbose, default: 'true', description: Disable console logging if false}
  # Input configuration
  - arg: {name: rotation_type, default: none, description: Input camera rotation}
  - arg: {name: publish_color, default: 'true', description: Whether to publish semantics colored image (colormap)}
  - arg: {name: publish_overlay, default: 'true', description: Whether to publish semantics overlay image}
  - arg: {name: publish_labels, default: 'true', description: Whether to publish detected labels}
  - arg: {name: show_config, default: 'true', description: Whether to print out loaded config}
  - arg: {name: show_output_config, default: 'true', description: Whether to print out publish config}
  # Colormap and label grouping
  - arg: {name: labelspace_name, default: ade20k_mp3d, description: Label remapping configuration}
  - arg: {name: colormap_path, default: $(find-pkg-share semantic_inference_ros)/config/distinct_150_colors.csv, description: Visualization colormap}
  # nodes
  - arg: {name: compressed_rgb, default: 'false', description: Triggers decompression for RGB stream}
  - node:
      if: $(var compressed_rgb)
      pkg: image_transport
      exec: republish
      name: decompress_rgb
      param:
        - {name: in_transport, value: compressed}
        - {name: out_transport, value: raw}
      remap:
        - {from: in/compressed, to: color/image_raw/compressed}
        - {from: out, to: color/image_raw}
  - arg: {name: name, default: "front", description: "Unique name for segmentation node"}
  - node:  # 2D semantic segmentation
      pkg: semantic_inference_ros
      exec: segmentator_node
      name: semantic_inference_$(var name)
      on_exit: shutdown
      launch-prefix: $(if $(var debug) 'gdbserver localhost:3000')
      args: >
        --config-utilities-file $(var model_config)
        --config-utilities-file $(find-pkg-share semantic_inference_ros)/config/label_groupings/$(var labelspace_name).yaml@output/recolor
        --config-utilities-yaml {segmenter: {model: {model_file: $(var model_name).onnx, force_rebuild: $(var force_rebuild)}}}
        --config-utilities-yaml {recolor: {colormap_path: $(var colormap_path)}}
        --config-utilities-yaml {image_rotator: {rotation: $(var rotation_type)}}
        --config-utilities-yaml {publish_color: $(var publish_color)}
        --config-utilities-yaml {publish_overlay: $(var publish_overlay)}
        --config-utilities-yaml {publish_labels: $(var publish_labels)}
        --config-utilities-yaml {show_config: $(var show_config)}
        --config-utilities-yaml {show_output_config: $(var show_output_config)}